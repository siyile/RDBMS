1. Basic information
Team #: 18
Github Repo Link:
Student 1 UCI NetID: siyile
Student 1 Name: Siyi Le
Student 2 UCI NetID: jyin12
Student 2 Name: Jie Yin


2. Meta-data
- Show your meta-data design (Tables and Columns table) and information about each column.
Tables
(1, "Tables", "Tables")
(2, "Columns", "Columns")
(3, "Employee", "Employee")

Columns
(1, "table-id", TypeInt, 4 , 1)
(1, "table-name", TypeVarChar, 50, 2)
(1, "file-name", TypeVarChar, 50, 3)
(2, "table-id", TypeInt, 4, 1)
(2, "column-name",  TypeVarChar, 50, 2)
(2, "column-type", TypeInt, 4, 3)
(2, "column-length", TypeInt, 4, 4)
(2, "column-position", TypeInt, 4, 5)
(3, "empname", TypeVarChar, 30, 1)
(3, "age", TypeInt, 4, 2)
(3, "height", TypeReal, 4, 3)
(3, "salary", TypeInt, 4, 4)

Records in "Tables" and "Columns" are stored as above. In constructed function, we hard code format for these two tables
by calling "appendAttr".We add one more parameter called "isSystemTable" in "createTable" to decide whether we are going
to manage meta-data. We also designed "generateTablesData" and "generateColumnsData" to make meta-data fit in the format
of "insertRecord" so that we can call "insertTuple" to insert data in system table.

3. Internal Record Format
- Show your record format design and describe how your design satisfies O(1) field access. If not, just mention that your team hasn't implemented this feature.

Record can be separate into 5 parts:
    The first part is redirectIndicator;
    the second part is an int size for attribute number;
    the third part is nullIndicator;
    the fourth part is indices representing the end points of corresponding fields;
    and the last part is data itself, which order corresponding to the order of recordDescriptor;
Since we have index for each field, as long as we have dataOffset and differences between indices, which could be found
at exact positions, we can reach to each field by calculating its offset and length in O(1).

- Describe how you store a VarChar field.

For Varchar, we allocate extra space of int size at the front of this field to indicate the length of Varchar.

4. Page Format
- Show your page format design.

The whole page can be separate into four parts:
    The first part is used to store records.
    The second part is free space left, which is in the middle of current page.
    The third part is directories. Each directory has 8 bytes to indicate offset and length.
    At the end of page, we allocate extra 8 bytes to store and update the slot number and free space left in this page.

5. File Format
- Show your file format design
Besides "Tables" and "Columns", other tables are designed in similar format.
For those files to store records, at its beginning, we use the first page to store its three attributes: readPageCount,
writePageCount and appendPageCount. Record information will be inserting into the next page, which still be numbered as
page0. And the rest of file are designed in page format.

6. Describe the following operation logic.
- Update a record

For updateTuple, since we already have the tableName, we can find the fileName matched to tableName in map "tableNameToFileMap".
In this way, we can use a fileHandle to call "openFile" function to open it. Also, we can have the attributes of this
table in another map called "tableNameToAttrMap". As long as we have attributes as descriptor and rid, we can call "updateRecord"
in rbfm to update tuple. At last, we close this file as the end of this operation.

- Delete a record

For deleteTuple, since we already have the tableName, we can find the fileName matched to tableName in map "tableNameToFileMap".
In this way, we can use a fileHandle to call "openFile" function to open it. Also, we can have the attributes of this
table in another map called "tableNameToAttrMap". As long as we have attributes as descriptor and rid, we can call "deleteRecord"
in rbfm to update tuple. At last, we close this file as the end of this operation.

- Scan

Firstly, we get "fileName" from tableName through "tableNameToFileMap", and then we can open it by fileHandle.
Also, we can get "recordDescriptor" from "tableNameToAttrMap", in this way, we call rbfm::scan to finish this operation.
We design a class called "RBFM_ScanIterator" to get the next record.  When getNextRecord() is called, if current RID is
valid and there is no condition request need to satisfy, by gradually increase the slotNumber and pageNumber of current
RID, a satisfying record can be fetched from the file. When we call "scan", the whole file will be scanned and all the
information in hashMaps will be updated.


7. Implementation Detail
- Other implementation details goes here.
除了讲所有map的使用方法 还有别的要说的吗

8. Other (optional)
- Freely use this section to tell us about things that are related to the project 2, but not related to the other sections (optional)           